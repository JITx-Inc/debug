#use-added-syntax(jitx)
defpackage debug/test-points :
  import core

  import jitx
  import jitx/commands

  import jsl/landpatterns/pads

  import debug/test-point-symbol

doc: \<DOC>
makes test points
TODO: params
<DOC>
public defn make-test-points (obj:JITXObject -- radius:Double) -> Tuple<Instance> :
  match(obj) :
    (obj:Pin) : to-tuple $ for p in pins(obj) seq : make-test-point(p, radius = radius)
    (obj:Net) : []
    (otherwise) : throw(Exception("oh no"))

defn make-test-point (pin:JITXObject -- radius:Double, ref:String|False = false) -> Instance :
  inside pcb-module :
    inst tp : TestPoint(shape = Circle(radius))
    net (tp.p, pin)
    tp

public pcb-module TestPoint (-- shape:Shape, ref:String|False) :
  inst tp : TestPoint(shape = shape)
  match(ref:String) :
    reference-designator(tp) = ref

pcb-component TestPoint (-- shape:Shape) :
  port p

  ; Schematic symbol
  val sym = testpoint-sym(false)
  symbol = sym(p => sym.p)

  ; Make landpattern
  val pkg = testpoint-pkg(shape)
  landpattern = pkg(p => pkg.p)

pcb-landpattern testpoint-pkg (shape:Shape) :
  pad p : testpoint-pad(shape) at loc(0.0, 0.0)
