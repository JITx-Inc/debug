#use-added-syntax(jitx)
defpackage debug/test-points/symbol :
  import core
  import collections
  import math

  import jitx
  import jitx/commands

  import jsl/ensure
  import jsl/symbols/framework
  import jsl/geometry/box

doc: \<DOC>
TestPointSymbolParams: parameters of the test point schematic symbol
<DOC>
public defstruct TestPointSymbolParams :
  shape:Shape
  pin-length:Double
  ref-location:Point
  ref:String
  line-width:Double with:
    default => 0.05
    ensure => ensure-positive!

doc: \<DOC>
Default constructor
<DOC>
public defn TestPointSymbolParams () :
  TestPointSymbolParams(
    Circle(1.0)
    0.5
    Point(0.0,0.0)
    ">REF"
  )


deftype TestPointSym <: SymbolDefn
public defn testpoint-sym (params:TestPointSymbolParams) -> SchematicSymbol :
  create-symbol(TestPointSym(params))

defn TestPointSym (params:TestPointSymbolParams) -> TestPointSym :
  new TestPointSym :
    defmethod name (this) -> String : "TestPoint"
    defmethod build-pins (this, sn:SymbolNode) :
      add-pin(sn, Ref(`p), [0.0 0.0], name = "pin-1")
    defmethod build-artwork (this, sn:SymbolNode) :
      ; [TODO] : parameterize
      circle(sn, 0.25, [0.0 1.0])
      line(sn, [[0.0, 0.0] [0.0 0.75]])
    defmethod build-params (this, sn:SymbolNode) :
      ; [TODO] : parameterize
      val overall = glyph-bounds(sn)
      text(sn, [right(overall) + 0.5, 0.5], ref(params), anchor = W, font-size = 8)
