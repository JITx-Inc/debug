#use-added-syntax(jitx)
defpackage debug/test-points/test-points :
  import core

  import jitx
  import jitx/commands

  import jsl/errors

  import debug/test-points/symbol
  import debug/test-points/landpattern

doc: \<DOC>
Approaches for producing test-point reference designators.
We provide two strategies:
* Prefix, parameterized by a string produces reference designators
  of the form "P0, P1, ...", where "P" is any prefix.
* ObjectName names test-points after the target pin or net. If the object is
  not named, we default to prefixed references "TP0, TP1, ...".

This approach is extensible: any subtype of `ReferenceStrategy`
must simply implement the multi
`reference (r:ReferenceStrategy, target:JITXObject) -> String`,
which generates reference designators from the JITX target object.
<DOC>
public deftype ReferenceStrategy
public defmulti reference (r:ReferenceStrategy, target:JITXObject) -> String

val ID-COUNTER = to-seq(0 to false)

doc: \<DOC>
The Prefix reference designator generation strategy,
parameterized by a string prefix.
Generates references of the form "P0, P1, ...", where
"P" is the user-provided reference.
<DOC>
public defstruct Prefix <: ReferenceStrategy :
  prefix: String
defmethod reference (r:Prefix, target:JITXObject) :
  to-string("%_%_" % [prefix(r), next(ID-COUNTER)])

doc: \<DOC>
The ObjectName reference designator generation strategy.
Generates references from net names when available.
Defaults to `Prefix("TP")` when unavailable.
<DOC>
public defstruct ObjectName <: ReferenceStrategy
defmethod reference (r:ObjectName, target:JITXObject) :
  match(ref?(target)) :
    (r:Ref) : to-string(r)
    (otherwise) : reference(Prefix("TP"), target)

doc: \<DOC>
Automatically generates test points for a given object.
Given a net or a port, instantiate a test point for each
single-pin net or port contained within the JITX object.
Returns a tuple of Instances representing all new test points.

@param obj: Either a port or a net
@param tp: An instantiable for the test points
@param reference-strategy: Strategy for generating reference designators. Default: `ObjectName()`

In this example, JITX will instantiate test points for
both the positive and negative leads of the power net, given
a custom `MyTestPoint` instantiable.
```stanza
pcb-module my-module :
  port pwr : power
  inst my-inst : my-component
  net PWR (self.pwr, my-inst.pwr)
  make-test-points(PWR, MyTestPoint)
```
<DOC>
public defn make-test-points (
    obj:JITXObject,
    tp:Instantiable
    reference-strategy:ReferenceStrategy = ObjectName())
    -> Tuple<Instance> :
  make-test-point-per-pin(obj, tp, false, reference-strategy)

doc: \<DOC>
Automatically generates test points for a given object.
Given a net or a port, instantiate a test point for each
single-pin net or port contained within the JITX object.
Returns a tuple of Instances representing all new test points.

@param obj: Either a port or a net
@param shape: The shape of the test point
@param symbol-params: Parameters describing the test points' schematic symbols
@param reference-strategy: Strategy for generating reference designators. Default: `ObjectName()`

In this example, JITX will instantiate test points for
both the positive and negative leads of the power net. Each
test points will have a small circular SMD pad.
```stanza
pcb-module my-module :
  port pwr : power
  inst my-inst : my-component
  net PWR (self.pwr, my-inst.pwr)
  make-test-points(PWR, Circle(0.5))
```
<DOC>
public defn make-test-points (
    obj:JITXObject,
    shape:Shape = Circle(1.0)
    symbol-params:TestPointSymbolParams = TestPointSymbolParams(),
    reference-strategy:ReferenceStrategy = ObjectName())
    -> Tuple<Instance> :
  make-test-point-per-pin(obj, TestPoint(shape, symbol-params), false, reference-strategy)

; Traverse port/net structure, attach one test point to each
; single-pin port or net
defn make-test-point-per-pin (
    target:JITXObject,
    point:Instantiable,
    name:String|False,
    reference-strategy:ReferenceStrategy)
    -> Tuple<Instance> :
  match(target) :
    (obj:Pin) :
      to-tuple $ for p in pins(obj) seq : instantiate-test-point(p, point, name, reference-strategy)
    (obj:Net) :
      match(port-type(obj)) :
        (t:SinglePin) : [instantiate-test-point(obj, point, name, reference-strategy)]
        (otherwise) :
          to-tuple $ for n in single-pin-nets(obj) seq : instantiate-test-point(n, point, name, reference-strategy)
    (obj) : throw(ArgumentError("Can only call make-test-points with a pin or net; given %_" % [obj]))

defn instantiate-test-point (pin:JITXObject, component:Instantiable, name:String|False, reference-strategy) -> Instance :
  inside pcb-module :
    inst testpoint-comp : component
    net (testpoint-comp.p, pin)
    reference-designator(testpoint-comp) = reference(reference-strategy, pin)
    instance-status(testpoint-comp) :
      bom-status = NotInBOM
    testpoint-comp

; Parameterizable instantiable
defn TestPoint (shape:Shape, symbol-params:TestPointSymbolParams) -> Instantiable :
  pcb-component comp :

    pin-properties:
      [pin:Ref | pads:Ref ...]
      [p       | p           ]

    ; Schematic symbol
    assign-symbol(testpoint-sym(symbol-params))

    ; Assign landpattern
    assign-landpattern(testpoint-pkg(shape))
  comp
